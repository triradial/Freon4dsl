// Generated by the Freon Language Generator.
import { FreNode, FreProjection, FreProjectionHandler, FreTableDefinition, FRE_BINARY_EXPRESSION_LEFT, FRE_BINARY_EXPRESSION_RIGHT,
        Box, TableRowBox, HorizontalLayoutBox, MultiLineTextBox, MultiLineTextBox2, BoxFactory, BoxUtil, FreNodeReference } from "@freon4dsl/core";
import { StudyConfiguration, Description, Period, Event, EventSchedule, CheckList, Task, SystemAccess, Step, TypeOfEvent } from "../language/gen";
import { StudyConfigurationModelEnvironment } from "config/gen/StudyConfigurationModelEnvironment";

/**
 * Class CustomStudyConfigurationModelProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These are merged with the custom build additions and other definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on one of the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */

export class CustomStudyConfigurationModelProjection implements FreProjection {
    name: string = "Custom";
    handler: FreProjectionHandler;
    nodeTypeToBoxMethod: Map<string, (node: FreNode) => Box> = new Map<string, (node: FreNode) => Box>([
        ["StudyConfiguration", this.createStudyConfiguration],
        ["Description", this.createDescription],
        ["Period", this.createPeriod],
        ["Event", this.createEvent],
        ["EventSchedule", this.createSchedule],
        // ["CheckList", this.createChecklist],
        // ["Task", this.createTask],
    ]);

    nodeTypeToTableDefinition: Map<string, () => FreTableDefinition> = new Map<string, () => FreTableDefinition>([
        // register your custom table definition methods here
        // ['NAME_OF_CONCEPT', this.TABLE_DEFINITION_FOR_CONCEPT],
    ]);

    getTableHeadersFor(projectionName: string): TableRowBox {
        return null;
    }
    
    ////////////////////////////////////////////////////////////////////
    createStudyConfiguration (element: StudyConfiguration): Box {
    
        // this.overrideTableProjects();
        return BoxFactory.verticalLayout(element, "StudyConfiguration-overall", "", [
            // BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-0", "h-4"),
            // BoxFactory.horizontalLayout(element, "StudyConfiguration-hlist-line-1", "", "top",
            //     [
            //         BoxUtil.labelBox(element, "STUDY NAME:", "top-1-line-1-item-0", undefined, "app-uppercase"),
            //         BoxUtil.textBox(element, "name")
            //     ],
            //     { selectable: false },
            // ), 
            BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-1", "h-2"),
            BoxUtil.listGroupBox(element, "Options", "study-periods-group",
                BoxUtil.indentBox(element, 4, true, "3",
                    BoxFactory.verticalLayout(element, "StudyConfiguration-vlist-line-3", "", 
                    [
                        BoxUtil.emptyLineBox(element, "option-empty-line", "h-4"),
                        BoxUtil.switchElement(element, "showPeriods", "Configure by Periods/Phases"), 
                        BoxUtil.switchElement(element, "showActivityDetails", "Show Shared Tasks"),
                        BoxUtil.switchElement(element, "showSystems", "Show Systems"),
                        BoxUtil.switchElement(element, "showScheduling", "Show Scheduling") 
                    ])
                ), 
            {cssClass: "type1", isExpanded: true, hasActions: false} ),
            BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-3", "h-2"),
            ...(element.showPeriods === true? [                    
                BoxUtil.listGroupBox(element, "Study Periods", "study-periods-group",
                    BoxUtil.indentBox(element, 3, true, "9",
                        BoxUtil.verticalPartListBox(element, (element).periods, "periods", null, this.handler)
                    ),
                {cssClass:"type1", isExpanded:true}),
            ] : [
                BoxUtil.listGroupBox(element, "Events", "group-1-line-2-item-0",
                    BoxUtil.indentBox(element, 4, true, "4",
                        BoxUtil.verticalPartListBox(element, element.events, "events", null, this.handler)
                    ),
                {cssClass:"type2", isExpanded:true}),
            ]),
            ...(element.showActivityDetails === true? [
                    BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-4", "h-2"),
                    BoxUtil.listGroupBox(element, "Shared Tasks", "task-details-group",
                        BoxUtil.indentBox(element, 4, true, "13",
                            BoxUtil.verticalPartListBox(element, (element).tasks, "tasks", null, this.handler)
                        ), 
                    {cssClass:"type1", isExpanded:true}),
                    ...(element.showSystems === true? [
                    BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-5", "h-2"),
                    BoxUtil.listGroupBox(element, "Systems", "sys-defs-group",
                        BoxUtil.indentBox(element, 4, true, "17",
                            BoxUtil.verticalPartListBox(element, (element).systemAccesses, "systemAccesses", null,  this.handler)
                        ), 
                    {cssClass:"type1", isExpanded:true}),
                    ] : []),
                    BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-6", "h-2"),
                    BoxUtil.listGroupBox(element, "People", "staffing-group",
                        BoxUtil.indentBox(element, 4, true, "21",
                            BoxUtil.getBoxOrAction(element, "staffing", "Staffing", this.handler)
                        ), 
                    {cssClass:"type1", isExpanded:true})
                ] : []),
        ]);
    }

    createDescription (desc: Description): Box {
        const ph = "<" + desc.$$propertyName + ">";
        return new MultiLineTextBox2(desc, "study-part-description", () => { return desc.text}, (t: string) => { desc.text = t}, {placeHolder: ph, cssClass:"mr-2"});
    }

    createPeriod (period: Period): Box {
        let box: Box = BoxUtil.itemGroupBox(period, "name", "Period:",
            BoxUtil.indentBox(period, 5.5, true, "period-indent",
                BoxFactory.verticalLayout(period, "period-detail", "", [
                    BoxFactory.horizontalLayout(period, "period-hlist-line-1", "","top",
                        [
                            BoxUtil.getBoxOrAction(period, "description", "Description", this.handler)
                        ],
                        { selectable: false }, "w-full mt-1"
                    ),
                    BoxUtil.listGroupBox(period, "Events", "group-1-line-2-item-0",
                        BoxUtil.indentBox(period, 4, true, "4",
                            BoxUtil.verticalPartListBox(period, period.events, "events", null, this.handler)
                        ), 
                    {cssClass:"type2", isExpanded:true})
                ])
            ), 
        {cssClass:"w-full type1", placeHolder:"enter", isExpanded:true});
        return box;
    }

    // createPeriod (period: Period): Box {
    //     return BoxFactory.verticalLayout(period, "Period-overall", "", [
    //         BoxFactory.horizontalLayout(period, "Period-hlist-line-0", "", "center",
    //             [
    //                 new IconBox(period, "draggrip", faGripVertical, "grab"),
    //                 BoxUtil.labelBox(period, "Period:", "top-1-line-0-item-1", undefined, "app-uppercase"),
    //                 BoxUtil.textBox(period, "name")                   
    //             ],
    //             { selectable: false }
    //         ),
    //         BoxUtil.indentBox(period, 1.5, true, "e1",
    //             BoxFactory.verticalLayout(period, "Period-detail", "", [
    //                 BoxFactory.horizontalLayout(period, "Period-hlist-line-1", "","top",
    //                     [
    //                         BoxUtil.labelBox(period, "Description:", "top-1-line-2-item-0",undefined, "app-small-caps"),
    //                         BoxUtil.getBoxOrAction(period, "description", "Description", this.handler)
    //                     ],
    //                     { selectable: false }, "w-full"
    //                 ),
    //                 BoxUtil.listGroupBox(period, "EVENTS", 0, "group-1-line-2-item-0",
    //                     BoxUtil.indentBox(period, 4, true, "4",
    //                         BoxUtil.verticalPartListBox(period, period.events, "events", null, this.handler)
    //                     ) 
    //                 )
    //             ])
    //         )
    //     ]);
    // }

    createEvent (event: Event): Box {
        let showScheduling = false;
        if (event.freOwner() instanceof(Period)) {
            showScheduling = ((event.freOwner() as Period).freOwner() as StudyConfiguration).showScheduling;
        } else {
            showScheduling = (event.freOwner() as StudyConfiguration).showScheduling;
        }
        if (event.typeOfEvent === null) {
            event.typeOfEvent = FreNodeReference.create<TypeOfEvent>("site", "TypeOfEvent");
        }
        let box: Box = BoxUtil.itemGroupBox(event, "name", "Event:",
            BoxUtil.indentBox(event, 5.5, true, "e1",
                BoxFactory.verticalLayout(event, "Event-detail", "", [
                    BoxFactory.horizontalLayout(event, "EventSchedule-hlist-line-0", "", "top", [
                        BoxUtil.labelBox(event, "Alt-Name:", "alt-top-1-line-9-item-0"),
                        BoxUtil.textBox(event, "alternativeName"),
                    ],
                    { selectable: false },
                    ),
                    BoxFactory.horizontalLayout(event, "TypeOfEvent-hlist-line-0", "", "top", [
                        BoxUtil.labelBox(event, "Type:", "typeOfEvent-kind-alt-top-1-line-9-item-0"),
                        BoxUtil.referenceBox(
                            event,
                            "typeOfEvent",
                            (selected: string) => {
                                event.typeOfEvent = FreNodeReference.create<TypeOfEvent>(selected, "TypeOfEvent");
                            },
                            StudyConfigurationModelEnvironment.getInstance().scoper,
                        ),
                        ],
                        { selectable: false },
                    ),
                    ...(showScheduling === true? [                    
                        BoxUtil.listGroupBox(event, "Schedule", "schedule-item", 
                            BoxUtil.indentBox(event, 2, true, "e11",
                                this.handler.getBoxProvider(event.schedule).box
                                // BoxUtil.getBoxOrAction(event, "schedule", "EventSchedule", this.handler)
                            ), 
                        {cssClass:"type3", isExpanded:true, hasActions:false}) 
                    ] : []),
                    BoxUtil.labelBox(event, "Checklist:", "top-1-line-9-item-0"),
                        BoxUtil.indentBox(event, 2, true, "e12",
                        BoxUtil.getBoxOrAction(event, "checkList", "CheckList", this.handler)
                    ),
                    BoxUtil.emptyLineBox(event, "Event-empty-line-11")
                ])
            ), 
        {cssClass:"w-full type2", placeHolder:"enter", isShareable:true});
        return box;
    }

    createSchedule (schedule: EventSchedule): Box {
        return BoxFactory.verticalLayout(schedule, "EventSchedule-overall", "", [
            BoxFactory.horizontalLayout(schedule, "EventSchedule-hlist-line-0", "", "top",
                [
                    BoxUtil.labelBox(schedule, "First Scheduled:", "top-1-line-0-item-0", undefined, "app-small-caps" ),
                    BoxUtil.getBoxOrAction(schedule, "eventStart", "EventStart", this.handler),
                ],
                { selectable: false },
            ),
            BoxFactory.horizontalLayout(schedule, "EventSchedule-hlist-line-1", "", "top",
                [
                    BoxUtil.labelBox(schedule, "Then Repeats:", "top-1-line-1-item-0", undefined, "app-small-caps"),
                    BoxUtil.getBoxOrAction(schedule, "eventRepeat", "RepeatExpression", this.handler),
                ],
                {selectable: false},
            ),
            BoxFactory.horizontalLayout(schedule, "EventSchedule-hlist-line-2", "", "top",
                [
                    BoxUtil.labelBox(schedule, "Window:", "top-1-line-2-item-0", undefined, "app-small-caps"),
                    BoxUtil.getBoxOrAction(schedule, "eventWindow", "EventWindow", this.handler),
                ],
                {selectable: false},
            ),
            BoxFactory.horizontalLayout(schedule, "EventSchedule-hlist-line-3", "", "top",
                [
                    BoxUtil.labelBox(schedule, "Time of Day:", "top-1-line-3-item-0", undefined, "app-small-caps"),
                    BoxUtil.getBoxOrAction(schedule, "eventTimeOfDay", "EventTimeOfDay", this.handler),
                ],
                {selectable: false},
            ),
        ]);
    }

    createChecklist (checklist: CheckList): Box {
        return BoxUtil.listGroupBox(checklist, "Checklist", "checklists-group",
            BoxUtil.indentBox(checklist, 3, true, "9",
                BoxUtil.verticalPartListBox(checklist, checklist.activities, "activities", null, this.handler)
            ),
        {cssClass:"type3", isExpanded:true});
    }

 }
