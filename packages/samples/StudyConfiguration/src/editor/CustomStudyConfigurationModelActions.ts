// Generated by the Freon Language Generator.
import {
    FreCustomAction,
    FreCombinedActions,
    Box,
    FreTriggerType,
    FreEditor,
    FreCaret,
    FreNode,
    OptionalBox,
    FreCreateBinaryExpressionAction,
    FreTriggerUse, isString, ActionBox, FreNodeReference, ownerOfType
} from "@freon4dsl/core";
import { RoleProvider } from "@freon4dsl/core";
import { action, runInAction } from "mobx";
import { CheckList, Event, Period, StudyConfiguration, Task, TaskReference } from "../language/gen/index";
import { NumberLiteralExpression } from "../language/gen/NumberLiteralExpression";

/**
 * Class CustomStudyConfigurationModelActions provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export class CustomStudyConfigurationModelActions implements FreCombinedActions {
    binaryExpressionActions: FreCreateBinaryExpressionAction[] = MANUAL_BINARY_EXPRESSION_ACTIONS;
    customActions: FreCustomAction[] = MANUAL_CUSTOM_ACTIONS;
}

export const MANUAL_BINARY_EXPRESSION_ACTIONS: FreCreateBinaryExpressionAction[] = [
    // Add your own custom binary expression actions here
];

export const MANUAL_CUSTOM_ACTIONS: FreCustomAction[] = [
    FreCustomAction.create({
        activeInBoxRoles: ["share-task"],
        trigger: "nothing",
        action: (box: Box, trigger: FreTriggerUse, editor: FreEditor) => {
            const task = box.element as Task
            console.log("SHARE TASK " + task.name)
            const taskRef = new TaskReference();
            taskRef.task = FreNodeReference.create<Task>(task.name, "Task")
            let checklist = task.freOwner() as CheckList;
            let studyConfig = ownerOfType(task, "StudyConfiguration") as StudyConfiguration
            const taskIndex = task.freOwnerDescriptor().propertyIndex
            runInAction( () => {
                checklist.activities.splice(taskIndex, 1, taskRef)
                studyConfig.tasks.push(task);
            })
            return taskRef
        }
    }),    
    FreCustomAction.create({
        activeInBoxRoles: ["inline-task"],
        trigger: "nothing2",
        action: (box: Box, trigger: FreTriggerUse, editor: FreEditor) => {
            const taskRef = box.element as TaskReference
            console.log("INLINE TASK " )
            let checklist = taskRef.freOwner() as CheckList;
            const taskIndex = taskRef.freOwnerDescriptor().propertyIndex
            const newTask = taskRef.task.referred.copy();
            runInAction( () => {
                checklist.activities.splice(taskIndex, 1, newTask)
            })
            return newTask
        }
    }),
    // Add your own custom behavior here
    FreCustomAction.create({
        activeInBoxRoles: [
            "FreBinaryExpression-left",
            "FreBinaryExpression-right",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "Day-startDay",
        ],
        trigger: /[0-9]/,
        action: (box: Box, trigger: FreTriggerUse, editor: FreEditor) => {
            const parent = box.element;
            const x = new NumberLiteralExpression();
            if( isString(trigger) ) {
                x.value = Number.parseInt(trigger.toString());
            }
            parent[(box as ActionBox).propertyName] = x;
            return x;
        },
        boxRoleToSelect: RoleProvider.property("NumberLiteralExpression", "value", "numberbox"),
        caretPosition: FreCaret.RIGHT_MOST
    })

];
