editor default

When {
    [when ${startWhen} ${timeAmountPart}]
    trigger = "When: Depending on when another event occurs"
}  

TimeAmount {
    [${value}${unit}]
}

StartDay {
    [Start Day]
}

Day {
    [day ${startDay}]
    trigger = "Day: A day of the study"
}

TimeAmountPart {
    [${operator}${timeAmount}]
    trigger = "plus or minus day/week/month/..."
} 

StudyStart {
    [at the start day of the Study ${timeAmountPart}]
    trigger = "Study Start: The start of the study"
} 

Previous {
    [when the Previous Event ${eventState} ${timeAmountPart}]
    trigger = "Previous: Depending on the previous event"
}

AnyDay {
    [on Any Day]
    trigger = "Any Day: An unscheduled event"
} 

Daily {
    [daily]
}

Weekly {
    [weekly]
}

Monthly {
    [monthly]
}

Forever {
    [forever]
}

RepeatEvery {
    [Every: ${repeatEvery}]
}

RepeatCondition {
    [
    ${repeatUnit} up to ${maxRepeats} times until ${until}
    ] trigger = "Repeat Condition: repeat until a condition occurs"
} 

RepeatCount {
    [
        ${repeatCount} time(s)  
    ] trigger = "repeat count: repeat a specific number of times"
} 

BetweenTimes {
    [
        starting by ${startTimeAsString replace=TimePicker} and ending by ${endTimeAsString replace=TimePicker}
    ] trigger = "between times: The time of day at which the event must start and end"
} 

StartingBy {
    [
        starting by ${startTimeAsString replace=TimePicker}
    ] trigger = "starting by: The time of day at which the event must start"
} 

EndingBy {
    [
        ending by ${endTimeAsString replace=TimePicker}
    ] trigger = "ending by: The time of day at which the event must end"
} 

ComplianceWindow {
    [
        ${maxDaysBefore} day(s) before and ${maxDaysAfter} day(s) after
    ] trigger = "compliance window: The window of days before and after an event during which it must be completed to be compliant"
}

EventWindow {
    [
        ${daysBefore} day(s) before and ${daysAfter} day(s) after
        with a compliance window of ${complianceWindow}
    ] 
}

EventSchedule {
    [
        First scheduled ${eventStart}
        with a window of ${eventWindow}
        and then repeats ${eventRepeat}
        limited to ${eventTimeOfDay}
    ]
} 


EventReference {
    [${event} ${eventState} ]
    referenceShortcut = ${event}
    }

Days {
    [${count}]
}

