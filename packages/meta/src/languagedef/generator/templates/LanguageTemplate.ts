import { FreMetaLanguage, FreMetaLimitedConcept } from "../../metalanguage/index.js";
import { Names, FREON_CORE, LangUtil, GenerationUtil, STDLIB_GEN_FOLDER } from "../../../utils/index.js";

export class LanguageTemplate {
    generateLanguage(language: FreMetaLanguage, relativePath: string): string {
        return `
            // Generated by Freon LanguageTemplate
            import { ${Names.FreLanguage}, FreLanguageModel, FreLanguageModelUnit, FreLanguageProperty, FreLanguageConcept, FreLanguageInterface, ${Names.FreNodeReference} } from "${FREON_CORE}";

            // Import as MyLanguage to avoid naming conflicts in generated constructors
            import * as MyLanguage from "./internal";
            import { ${Names.stdlib(language)} } from "${relativePath}${STDLIB_GEN_FOLDER}/${Names.stdlib(language)}";

            /**
             * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
             */
             export function initializeLanguage() {
                ${Names.FreLanguage}.getInstance().name = "${language.name}";
                ${Names.FreLanguage}.getInstance().id = ${language.id !== undefined ? `"${language.id}"` : `"${language.name}"`};
                ${Names.FreLanguage}.getInstance().addModel(describe${Names.classifier(language.modelConcept)}());
                ${language.units
                    .map(
                        (concept) =>
                            `${Names.FreLanguage}.getInstance().addUnit(describe${Names.classifier(concept)}());`,
                    )
                    .join("\n")}
                ${language.concepts
                    .map(
                        (concept) =>
                            `${Names.FreLanguage}.getInstance().addConcept(describe${Names.concept(concept)}());`,
                    )
                    .join("\n")}
                ${language.interfaces
                    .map(
                        (intface) =>
                            `${Names.FreLanguage}.getInstance().addInterface(describe${Names.interface(intface)}());`,
                    )
                    .join("\n")}
                ${Names.FreLanguage}.getInstance().addReferenceCreator( (name: string, type: string) => {
                    return (!!name ? ${Names.FreNodeReference}.create(name, type) : null);
                });
                ${Names.FreLanguage}.getInstance().stdLib = ${Names.stdlib(language)}.getInstance();
            }

            function describe${Names.classifier(language.modelConcept)}(): FreLanguageModel {
                    const model: FreLanguageModel =             {
                        typeName: "${Names.classifier(language.modelConcept)}",
                        id: "${language.modelConcept.id}",
                        key: "${language.modelConcept.key}",
                        isNamespace: true,
                        language: "${language.modelConcept.language.key}",
                        constructor: (id?: string) => { return new MyLanguage.${Names.classifier(language.modelConcept)}(id); },
                        creator: (data: Partial<MyLanguage.${Names.classifier(language.modelConcept)}>) => { return MyLanguage.${Names.classifier(language.modelConcept)}.create(data); },
                        properties: new Map< string, FreLanguageProperty>(),
                    }
                    ${language.modelConcept
                        .allPrimProperties()
                        .map(
                            (prop) =>
                                `model.properties.set("${prop.name}", {
                                        name: "${prop.name}",
                                        id: "${prop.id}",
                                        key: "${prop.key}",
                                        type: "${GenerationUtil.getBaseTypeAsString(prop)}",
                                        isList: ${prop.isList},
                                        isPublic: ${prop.isPublic},
                                        language: "${prop.language.key}",
                                        propertyKind: "primitive"
                                    });`,
                        )
                        .join("\n")}
                    ${language.modelConcept
                        .allParts()
                        .map(
                            (prop) =>
                                `model.properties.set("${prop.name}", {
                                        name: "${prop.name}",
                                        id: "${prop.id}",
                                        key: "${prop.key}",
                                        type: "${Names.classifier(prop.type)}",
                                        isList: ${prop.isList},
                                        isPublic: ${prop.isPublic},
                                        language: "${prop.language.key}",
                                        propertyKind: "part"
                                    });`,
                        )
                        .join("\n")}
                    ${language.modelConcept
                        .allReferences()
                        .map(
                            (prop) =>
                                `model.properties.set("${prop.name}", {
                                        name: "${prop.name}",
                                        id: "${prop.id}",
                                        key: "${prop.key}",
                                        type: "${Names.classifier(prop.type)}",
                                        isList: ${prop.isList},
                                        isPublic: ${prop.isPublic},
                                        language: "${prop.language.key}",
                                        propertyKind: "reference"
                                    });`,
                        )
                        .join("\n")}
                        return model;
                    }

            ${language.units
                .map(
                    (modelunit) =>
                        `
                function describe${Names.classifier(modelunit)}(): FreLanguageModelUnit {
                    const modelunit: FreLanguageModelUnit =             {
                        typeName: "${Names.classifier(modelunit)}",
                        id: "${modelunit.id}",
                        key: "${modelunit.key}",
                        isNamedElement: true,
                        language: "${modelunit.language.key}",
                        fileExtension: "${modelunit.fileExtension}",
                        subConceptNames: [], // Nothing yet, but may change in the future
                        constructor: (id?: string) => { return new MyLanguage.${Names.classifier(modelunit)}(id); },
                        creator: (data: Partial<MyLanguage.${Names.classifier(modelunit)}>) => { return MyLanguage.${Names.classifier(modelunit)}.create(data); },
                        properties: new Map< string, FreLanguageProperty>(),
                        trigger: "${Names.classifier(modelunit)}"
                    }
                    ${modelunit
                        .allPrimProperties()
                        .map(
                            (prop) =>
                                `modelunit.properties.set("${prop.name}", {
                                        name: "${prop.name}",
                                        id: "${prop.id}",
                                        key: "${prop.key}",
                                        type: "${GenerationUtil.getBaseTypeAsString(prop)}",
                                        isList: ${prop.isList},
                                        isPublic: ${prop.isPublic},
                                        language: "${prop.language.key}",
                                        propertyKind: "primitive"
                                    });`,
                        )
                        .join("\n")}
                            ${modelunit
                                .allParts()
                                .map(
                                    (prop) =>
                                        `modelunit.properties.set("${prop.name}", {
                                        name: "${prop.name}",
                                        id: "${prop.id}",
                                        key: "${prop.key}",
                                        type: "${Names.classifier(prop.type)}",
                                        isList: ${prop.isList},
                                        isPublic: ${prop.isPublic},
                                        language: "${prop.language.key}",
                                        propertyKind: "part"
                                    });`,
                                )
                                .join("\n")}
                            ${modelunit
                                .allReferences()
                                .map(
                                    (prop) =>
                                        `modelunit.properties.set("${prop.name}", {
                                        name: "${prop.name}",
                                        id: "${prop.id}",
                                        key: "${prop.key}",
                                        type: "${Names.classifier(prop.type)}",
                                        isList: ${prop.isList},
                                        isPublic: ${prop.isPublic},
                                        language: "${prop.language.key}",
                                        propertyKind: "reference"
                                    });`,
                                )
                                .join("\n")}
                        return modelunit;
                    }`,
                )
                .join("\n")}

            ${language.concepts
                .map(
                    (concept) =>
                        `
                function describe${Names.concept(concept)}(): FreLanguageConcept {
                    const concept: FreLanguageConcept =             {
                        typeName: "${Names.concept(concept)}",
                        id: "${concept.id}",
                        key: "${concept.key}",
                        isAbstract: ${concept.isAbstract},
                        isPublic: ${concept.isPublic},
                        isLimited: ${concept instanceof FreMetaLimitedConcept},
                        instanceNames: ${concept instanceof FreMetaLimitedConcept ? `[${concept.instances.map((inst) => `"${inst.name}"`)}]` : "[]"},
                        language: "${concept.originalOwningLanguage.key}",
                        isNamedElement: ${concept.allPrimProperties().some((p) => p.name === "name")},
                        trigger: "${Names.concept(concept)}",
                        constructor: (id?: string) => { return ${concept.isAbstract ? "null" : `new MyLanguage.${Names.concept(concept)}(id)`}; },
                        creator: (data: Partial<MyLanguage.${Names.concept(concept)}>) => { return ${concept.isAbstract ? "null" : `MyLanguage.${Names.concept(concept)}.create(data)`}; },
                        properties: new Map< string, FreLanguageProperty>(),
                        baseName: ${!!concept.base ? `"${Names.classifier(concept.base.referred)}"` : "null"},
                        subConceptNames: [${LangUtil.subConcepts(concept)
                            .map((sub) => '"' + Names.classifier(sub) + '"')
                            .join(", ")}]
                    }
                    ${concept
                        .allPrimProperties()
                        .map(
                            (prop) =>
                                `concept.properties.set("${prop.name}", {
                                name: "${prop.name}",
                                id: "${prop.id}",
                                key: "${prop.key}",
                                type: "${GenerationUtil.getBaseTypeAsString(prop)}",
                                isList: ${prop.isList},
                                isPublic: ${prop.isPublic},
                                language: "${prop.language.key}",
                                propertyKind: "primitive"
                            });`,
                        )
                        .join("\n")}
                    ${concept
                        .allParts()
                        .map(
                            (prop) =>
                                `concept.properties.set("${prop.name}", {
                                name: "${prop.name}",
                                id: "${prop.id}",
                                key: "${prop.key}",
                                type: "${Names.classifier(prop.type)}",
                                isList: ${prop.isList},
                                isPublic: ${prop.isPublic},
                                language: "${prop.language.key}",
                                propertyKind: "part"
                            });`,
                        )
                        .join("\n")}
                    ${concept
                        .allReferences()
                        .map(
                            (prop) =>
                                `concept.properties.set("${prop.name}", {
                                name: "${prop.name}",
                                id: "${prop.id}",
                                key: "${prop.key}",
                                type: "${Names.classifier(prop.type)}",
                                isList: ${prop.isList},
                                isPublic: ${prop.isPublic},
                                language: "${prop.language.key}",
                                propertyKind: "reference"
                            });`,
                        )
                        .join("\n")}
                return concept;
            }`,
                )
                .join("\n")}
            ${language.interfaces
                .map(
                    (intface) =>
                        `
                function describe${Names.interface(intface)}(): FreLanguageInterface {
                    const intface: FreLanguageInterface =             {
                        typeName: "${Names.interface(intface)}",
                        id: "${intface.id}",
                        key: "${intface.key}",
                        isPublic: ${intface.isPublic},
                        isNamedElement: ${intface.allPrimProperties().some((p) => p.name === "name")},
                        properties: new Map< string, FreLanguageProperty>(),
                        constructor: undefined,
                        creator: undefined,
                        language: "${intface.originalOwningLanguage.NAME}",
                        subConceptNames: [${LangUtil.subConcepts(intface)
                            .map((sub) => '"' + Names.classifier(sub) + '"')
                            .join(", ")}]
                    }
                ${intface
                    .allPrimProperties()
                    .map(
                        (prop) =>
                            `intface.properties.set("${prop.name}", {
                                name: "${prop.name}",
                                id: "${prop.id}",
                                key: "${prop.key}",
                                type: "${GenerationUtil.getBaseTypeAsString(prop)}",
                                isList: ${prop.isList},
                                isPublic: ${prop.isPublic},
                                language: "${prop.language.NAME}",
                                propertyKind: "primitive"
                            });`,
                    )
                    .join("\n")}
                ${intface
                    .allParts()
                    .map(
                        (prop) =>
                            `intface.properties.set("${prop.name}", {
                                name: "${prop.name}",
                                id: "${prop.id}",
                                key: "${prop.key}",
                                type: "${Names.classifier(prop.type)}",
                                isList: ${prop.isList},
                                isPublic: ${prop.isPublic},
                                language: "${prop.language.NAME}",
                                propertyKind: "part"
                            });`,
                    )
                    .join("\n")}
                ${intface
                    .allReferences()
                    .map(
                        (prop) =>
                            `intface.properties.set("${prop.name}", {
                                name: "${prop.name}",
                                id: "${prop.id}",
                                key: "${prop.key}",
                                type: "${Names.classifier(prop.type)}",
                                isList: ${prop.isList},
                                isPublic: ${prop.isPublic},
                                language: "${prop.language.NAME}",
                                propertyKind: "reference"
                            });`,
                    )
                    .join("\n")}
                return intface;
            }`,
                )
                .join("\n")}
        `;
    }
}
