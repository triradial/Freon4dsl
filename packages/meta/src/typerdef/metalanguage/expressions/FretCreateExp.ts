// Generated by the Freon Language Generator.

import { FretExp } from "./FretExp.js";
import { FretPropInstance } from "../FretPropInstance.js";
import { FreMetaClassifier, MetaElementReference } from "../../../languagedef/metalanguage/index.js";

/**
 * Class FretCreateExp is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to any changes in the state of its properties.
 */
export class FretCreateExp extends FretExp {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<FretCreateExp>): FretCreateExp {
        const result = new FretCreateExp();
        if (!!data.propertyDefs) {
            data.propertyDefs.forEach((x) => result.propertyDefs.push(x));
        }
        if (!!data.$type) {
            result.$type = data.$type;
        }
        if (data.aglParseLocation) {
            result.aglParseLocation = data.aglParseLocation;
        }
        return result;
    }

    readonly $typename: string = "FretCreateExp"; // holds the metatype in the form of a string

    propertyDefs: FretPropInstance[] = []; // implementation of part 'propertyDefs'
    // @ts-ignore Property is set during parsing and checking phases
    $type: MetaElementReference<FreMetaClassifier>; // implementation of reference 'type'

    /**
     * Convenience method for reference 'type'.
     * Instead of returning a 'MetaElementReference<FreClassifier>' object,
     * it returns the referred 'FreClassifier' object, if it can be found.
     */
    get type(): FreMetaClassifier | undefined {
        if (!!this.$type) {
            return this.$type.referred;
        }
        return undefined;
    }
    toFreString(): string {
        return this.$type.name + " {\n\t\t" + this.propertyDefs.map((p) => p.toFreString()).join(",\n\t\t") + "\n\t} ";
    }
}
