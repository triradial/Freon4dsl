// Generated by the Freon Language Generator.

import { FretExp } from "./expressions/index.js";
import { FreMetaClassifier, MetaElementReference } from "../../languagedef/metalanguage/index.js";
import { FretClassifierSpec } from "./FretClassifierSpec.js";
import { FreTyperElement } from "./FreTyperElement.js";

/**
 * Class FretTypeRule is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to any changes in the state of its properties.
 */
export abstract class FretTypeRule extends FreTyperElement {
    readonly $typename: string = "FretTypeRule"; // holds the metatype in the form of a string
    $id: string = ""; // a unique identifier

    // @ts-ignore Property is set during parsing and checking phases
    exp: FretExp; // implementation of part 'exp'
    // @ts-ignore Property is set during parsing and checking phases
    $returnType: MetaElementReference<FreMetaClassifier>; // to be set by the checker
    // @ts-ignore Property is set during parsing and checking phases
    owner: FretClassifierSpec;

    toFreString() {
        return "TO BE IMPLEMENTED BY SUBCLASSES OF FretTypeRule";
    }
    get returnType(): FreMetaClassifier | undefined {
        if (!!this.$returnType && !!this.$returnType.referred) {
            return this.$returnType.referred;
        }
        return undefined;
    }
    set returnType(cls: FreMetaClassifier) {
        if (!!cls) {
            this.$returnType = MetaElementReference.create<FreMetaClassifier>(cls, "FreClassifier");
            this.$returnType.owner = this;
        }
    }
}
